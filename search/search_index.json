{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Identity Broker for AWS is as an alternative to AWS SSO to support OpenID Federation.</p> <p>Info</p> <p>The current implementation is done and tested with Keycloak. We are planning general purpose OIDC Intergration and with Standard Providers such as Okta, Auth, Google, etc..</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple and Secure</li> <li>CLI Credentials and Snippets for aws cli config, bash and powershell</li> <li>Console Login</li> <li>RBAC for any AWS Account in single place with Federated Identity Provider Configuration.</li> <li>Self Manged Deployment</li> <li>OpenSource. You can see what's going on and can customize for your own use. </li> </ul> <p>Note</p> <p>AWS SSO is a closed source and proprietary implemation and doesn't integrate well with External IDPs. Requires expensive support plan to learn and integrate and AWS Support engineers don't know anything out of their official docs.</p> <p></p>"},{"location":"#auth-flow","title":"Auth Flow","text":"<pre><code>sequenceDiagram;\n\nparticipant User;\nparticipant Broker;\nparticipant IDP;\nparticipant AWS;\n\nUser --&gt;&gt; Broker: Login via IDP\nBroker --&gt;&gt; IDP: Forward Auth Request\nIDP --&gt;&gt; Broker: IDP Login Successful\nUser --&gt;&gt; Broker: Open AWS Console\nBroker --&gt;&gt; AWS: Request Session\nAWS --&gt;&gt; Broker: Login Successfull\nBroker --&gt;&gt; Browser: Open AWS Console</code></pre>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#kubernetes-with-devspace","title":"Kubernetes with DevSpace","text":""},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>kubectl</li> <li>kube-login</li> <li>Valid Kubeconfig at ~/.kube/config</li> <li>devspace cli</li> <li> <p>Ensure you are logged in to docker registry and have necessary permissions to push images to the project</p> <pre><code>docker login\n</code></pre> </li> </ul>"},{"location":"deployment/#base64-encode-the-keycloak-client-secret-and-copy-the-output","title":"Base64 encode the Keycloak Client Secret and Copy the Output","text":"<pre><code>echo &lt;keycloak-client-secret&gt; | base64\n</code></pre>"},{"location":"deployment/#update-secretyaml-with-base64-encoded-keycloak-client-secret-copied-from-previous-step","title":"Update <code>secret.yaml</code> with Base64 Encoded Keycloak Client Secret Copied from Previous Step","text":"<pre><code>```diff\napiVersion: v1\nkind: Secret\nmetadata:\n    name: keycloak-client\ntype: Opaque\ndata:\n-  KEYCLOAK_CLIENT_SECRET: base64-data\n+  KEYCLOAK_CLIENT_SECRET: &lt;base64-encoded-client-secret&gt; \n```\n</code></pre>"},{"location":"deployment/#create-kubernetes-secret","title":"Create Kubernetes Secret","text":"<pre><code>kubectl apply -f secret.yml -n devops\n</code></pre>"},{"location":"deployment/#set-correct-values-for-environment-variables-in-devspaceyaml","title":"Set correct values for Environment variables in <code>devspace.yaml</code>","text":"<p><code>KEYCLOAK_CLIENT_ID</code></p> <p><code>KEYCLOAK_ISSUER</code></p> <p><code>APP_SECRET</code></p> <p><code>TITLE</code></p>"},{"location":"deployment/#deploy","title":"Deploy","text":"<pre><code>devspace use namespace devops\ndevspace deploy\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#docker-quick-start","title":"Docker Quick Start","text":"<ul> <li>Create .env using .env.example as reference</li> </ul> <pre><code>cp .env.example .env\n</code></pre> <ul> <li>Configure required environment values and run docker-compose</li> </ul> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"getting-started/#installing-from-source","title":"Installing from Source","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>python3</li> <li>virtualenv</li> <li>docker</li> <li>docker-compose</li> </ul>"},{"location":"getting-started/#installing","title":"Installing","text":"<p>A step by step series of examples that tell you how to get a development env running</p> <p>Clone the Project </p> <pre><code>git clone https://github.com/Rishang/aws-oidc-broker.git\n</code></pre> <p>Initialzing virtualenv</p> <pre><code>cd aws-oidc-broker\npython -m venv venv\nsource ./venv/bin/activate\n</code></pre> <p>Installing Dependencies</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Configure .env file or perform export of those variables</p> <pre><code>cp .env.example .env\n</code></pre> <p>Configure environment variables as required.</p>"},{"location":"variables/","title":"Environment","text":""},{"location":"variables/#keycloak_client_id","title":"KEYCLOAK_CLIENT_ID *","text":"<ul> <li>Default: \"\"</li> <li>Description:  OIDC App Client ID</li> </ul>"},{"location":"variables/#keycloak_client_secret","title":"KEYCLOAK_CLIENT_SECRET *","text":"<ul> <li>Default: \"\"</li> <li>Description: OIDC App Client Secret</li> </ul>"},{"location":"variables/#keycloak_issuer","title":"KEYCLOAK_ISSUER *","text":"<ul> <li>Default: \"\"</li> <li>Description: Its the base url for the .well-known path. Usually all providers service their .well-known paths at <code>&lt;issuer-url&gt;/.well-known</code></li> <li>Example:<ul> <li>Keycloak Quarkus: https://localhost:8080/realms/master</li> </ul> </li> </ul>"},{"location":"variables/#app_secret","title":"APP_SECRET","text":"<ul> <li>Defalt: \"!apppasswd\"</li> <li>Description: Optional env variable to set encrytion secret</li> </ul>"},{"location":"variables/#title","title":"TITLE","text":"<ul> <li>Defalt: \"Example\"</li> <li>Description: Title of the Broker Page</li> </ul>"},{"location":"setup/keycloak/","title":"Keycloak","text":""},{"location":"setup/keycloak/#creating-client","title":"Creating Client","text":"<ul> <li> <p>Download the client config file here</p> </li> <li> <p>Open Keycloak Admin Console</p> </li> <li> <p>Go to Clients tab. Create new client</p> </li> <li> <p>On Client Creation page, import the downloaded config.</p> </li> </ul> <p></p>"},{"location":"setup/keycloak/#configuration","title":"Configuration","text":"<p>The Client will be created with default url <code>http://localhost:5000/login</code> for Valid Redirect URIs, Base URL, and Web Origins</p> <p>Update this to your actual domain url e.g <code>https://aws.example.com/login</code></p>"},{"location":"setup/keycloak/#aws-config","title":"AWS Config","text":"<ul> <li> <p>Go to AWS IAM Console and add an Identity Provider</p> </li> <li> <p>Use following configuration</p> <ul> <li>Provider Type: OpenID Connect</li> <li>Provider URL: OIDC Provider URL, must be a internet accessible TLS secured enpoint (e.g <code>https://auth.example.com/realms/master</code> for Keycloak)</li> <li>Audience: Client ID issued by OIDC Provider (e.g <code>aws-oidc</code> Keycloak Client )</li> </ul> <p>Info<p>Ensure you add Provider URL without any Trailing slash <code>/</code></p> </p> </li> <li> <p>Get Thumbprint once <code>Provider URL</code> is set. and Click <code>Add provider</code></p> </li> </ul>"}]}